{
	"common": {
		"d": {
			"desc": "The following functions and classes are in global scope and so can be imported directly."
		},
		"f": {
			"bindPosition": {
				"desc": " Match a GameObjects position and angle to this GameObjects position and angle ",
				"snip": "public bindPosition(\n    obj: GameObject,\n    xOffset: number = 0,\n    yOffset: number = 0,\n    angOffset?: number,\n    xCenter: number = 0,\n    yCenter: number = 0,\n    matchAng: boolean = false\n) "
			},
			"unbindPosition": {
				"desc": " ",
				"snip": "public unbindPosition() "
			}
		},
		"c": {
			"GameObject": {
				"d": {
					"desc": "  Base class from which all other game objects will inherit\r\n",
					"snip": "import { GameObject } from './Bunas';"
				},
				"m": {
					"Class Constructor": {
						"desc": "\t\tz value determines order of draw/step events relative to other objects\r\n\t\tcolBox is used in collision detection and checking if object is in view\r\n\t",
						"snip": "constructor(\n    public x: number,\n    public y: number,\n    private _z: number = 0,\n    colWidth: number | {x?: number, y?: number, width: number, height?: number} = 0,\n    clipWidth: number | {x?: number, y?: number, width: number, height?: number} = -1\n) "
					},
					"step": {
						"desc": " Called on each Engine step event ",
						"snip": "public step      (delta: number): void "
					},
					"checkCollision": {
						"desc": "\t\tReturns true if point [x, y] (or rectangle [x, y, w, h] if provided) is within objects colBox\r\n\t\tx can be given as a GameObject, to use that objects colBox as the rectangle to check\r\n\t",
						"snip": "public checkCollision(x: number | GameObject, y?: number, w: number = 0, h: number = 0): boolean "
					},
					"distTo": {
						"desc": "\t\tReturns this distance from this object's origin, plus xOff and yOff, to a given point.\r\n\t\tSet squared to false to return the squared distance. This is a faster operation and will suffice when comparing distances\r\n\t ",
						"snip": "public distTo(x: number, y: number, xOff: number = 0, yOff: number = 0, squared: boolean = false) "
					},
					"setShadowMask": {
						"desc": " Set a polygon mask to be used when casting shadows from a light source ",
						"snip": "public setShadowMask(poly: {x: number, y: number}[] | Graphics.Sprite) "
					}
				},
				"v": {
					"area": {
						"desc": " Current area object is in ",
						"snip": "public area: World.Area"
					},
					"inView": {
						"desc": " Is the object currently on screen (set after step events are called) ",
						"snip": "public inView: boolean = true"
					},
					"pause": {
						"desc": " If true, step is not called, but draw is still called ",
						"snip": "public pause: boolean = false"
					},
					"pauseOffScreen": {
						"desc": " If true, object's step is not called if object is off screen  ",
						"snip": "public pauseOffScreen: boolean = false"
					},
					"get": {
						"desc": " Returns false if object is not being rendered in an area ",
						"snip": "let get alive(): boolean {\n    return !!this.area;\n}"
					},
					"startStep": {
						"desc": " Called at start of each Engine step event ",
						"snip": "public startStep?(delta: number): void;\n/** Called at end of each Engine step event */\npublic endStep?  (delta: number): void;\n/** Called on each Engine draw event */\npublic draw      (ctx: CanvasRenderingContext2D, delta: number): void {}"
					},
					"startDraw": {
						"desc": " Called at start of each Engine draw event ",
						"snip": "public startDraw?(ctx: CanvasRenderingContext2D, delta: number): void;\n/** Called at end of each Engine draw event */\npublic endDraw?  (ctx: CanvasRenderingContext2D, delta: number): void;\n/** Called on object mouseover if Input.setMouseListener() has been set */\npublic onMouseOver?(m: Input.Mouse): void;\n/**\nReturns instances of other GameObjects with overlapping clip boxes\nIf objects is not provided, all GameObjects in area are checked\nWhen checkOutsideView is false, search is limited to only objects within current view\n*/\npublic getCollisions(\n    objects: GameObject[] = this.area.objs,\n    checkOutsideView: boolean = false\n): GameObject[] {\n    return objects.filter(o => (\n            (checkOutsideView || o.inView) &&\n            o.x + o.colBox.x < this.x + this.colBox.x + this.colBox.width &&\n            o.x + o.colBox.x + o.colBox.width > this.x + this.colBox.x &&\n            o.y + o.colBox.y < this.y + this.colBox.y + this.colBox.height &&\n            o.y + o.colBox.y + o.colBox.height > this.y + this.colBox.y\n        ));\n}"
					},
					"x": {
						"desc": "",
						"snip": "public x: number"
					},
					"y": {
						"desc": "",
						"snip": "public y: number"
					}
				}
			}
		}
	},
	"Debug": {
		"d": {
			"desc": " Provides helper functions to debug application ",
			"snip": "import { Debug } from './Bunas';"
		},
		"v": {
			"fontSize": {
				"desc": " Debugger output font size ",
				"snip": "let fontSize        : number = 14"
			},
			"options": {
				"desc": " Toggle default proporties displayed in debugger ",
				"snip": "let options: {\n    dt: boolean;\n    view: boolean;\n    input : boolean;\n    area: boolean;\n    colBox: boolean;\n    clipBox: boolean;\n    positions: boolean;\n}"
			}
		},
		"f": {
			"toggle": {
				"desc": " Turn debugger on/off ",
				"snip": "function toggle(state?): void "
			},
			"log": {
				"desc": "\t\tLog a variable to the debugger.\r\n\t\tObjects will be stringifyed.\r\n\t\tIf logging a variable on every step, set persist = false to continually clear previous output.\r\n\t",
				"snip": "function log(data: any, persist = false): void "
			},
			"logObject": {
				"desc": "\t\tLogs details of a specfiic GameObject\r\n\t\tIf outline is true, objs colBox and clipBox are drawn\r\n\t ",
				"snip": "function logObject(g: GameObject, outline: boolean = false) "
			},
			"clear": {
				"desc": " Clear debugger output ",
				"snip": "function clear(): void "
			},
			"drawClipBox": {
				"desc": " Draw given objects clip boxes on next draw  ",
				"snip": "function drawClipBox(...objs: GameObject[]) "
			},
			"drawColBox": {
				"desc": " Draw given objects collision boxes on next draw  ",
				"snip": "function drawColBox(...objs: GameObject[]) "
			},
			"drawPosition": {
				"desc": " Draw given objects collision boxes on next draw  ",
				"snip": "function drawPosition(...objs: GameObject[]) "
			},
			"setColor": {
				"desc": " Sets colors of debug text ",
				"snip": "function setColor(primaryColor: string, secondaryColor?: string) "
			}
		}
	},
	"Engine": {
		"d": {
			"desc": " This module controls initalization of engine, asset loading and application lifecycle loop ",
			"snip": "import { Engine } from './Bunas';"
		},
		"t": {
			"AssetRouteList": {
				"desc": " List of assets names with relative file path ",
				"snip": "type AssetRouteList = {\n    sprites? : { [name: string]: string };\n    sounds?  : { [name: string]: string };\n    bgs?     : { [name: string]: string };\n}"
			},
			"AssetList": {
				"desc": " List of assets names with loaded asset object, generated from an AssetRouteList ",
				"snip": "type AssetList = {\n    sprites? : { [name: string]: HTMLImageElement };\n    sounds?  : { [name: string]: HTMLAudioElement };\n    bgs?     : { [name: string]: HTMLImageElement };\n}"
			}
		},
		"v": {
			"preStep": {
				"desc": " Lifecycle hook; called before each engine step event ",
				"snip": "let preStep: (delta: number)=>void = ()=>{}"
			},
			"postStep": {
				"desc": " Lifecycle hook; called after each engine step event ",
				"snip": "let postStep: (delta: number)=>void = ()=>{}"
			},
			"preDraw": {
				"desc": " Lifecycle hook; called before each engine draw event ",
				"snip": "let preDraw: (ctx: CanvasRenderingContext2D, delta: number)=>void = () => {}"
			},
			"postDraw": {
				"desc": " Lifecycle hook; called after each engine draw event ",
				"snip": "let postDraw: (ctx: CanvasRenderingContext2D, delta: number)=>void = () => {}"
			},
			"cW": {
				"desc": " Target canvas element width ",
				"snip": "let cW: number"
			},
			"cH": {
				"desc": " Target canvas element height ",
				"snip": "let cH: number"
			},
			"maxDelta": {
				"desc": " Max value for dT ",
				"snip": "let maxDelta: number = 3"
			}
		},
		"f": {
			"getDelta": {
				"desc": " Returns current FPS as a fraction of target FPS ",
				"snip": "function getDelta(): number "
			},
			"getCanvasEl": {
				"desc": " Returns reference to target canvas HTML element  ",
				"snip": "function getCanvasEl(): HTMLCanvasElement "
			},
			"getCanvasContext": {
				"desc": " Returns context of target canvas ",
				"snip": "function getCanvasContext(): CanvasRenderingContext2D "
			},
			"getSprite": {
				"desc": " Return preloaded sprite asset ",
				"snip": "function getSprite(name: string, isCheck: boolean = false): HTMLImageElement "
			},
			"getBackground": {
				"desc": " Return preloaded background asset ",
				"snip": "function getBackground(name: string, isCheck: boolean = false): HTMLImageElement "
			},
			"getSound": {
				"desc": " Return preloaded sound asset ",
				"snip": "function getSound(name: string, isCheck: boolean = false): HTMLAudioElement "
			},
			"init": {
				"desc": "\t\tInitalises engine and begins application.\r\n\t\tAn external callback function must be provided as an entry point to your code; called once initalistion has complete.\r\n\t\tThe target canvas may be provided as an element or id of an element. Otherwise the first canvas element found will be used, or one will be created.\r\n\t",
				"snip": "function init(\n    externalCallback: Function,\n    canEl? : string | HTMLElement, \n    canWidth? : number,\n    canHeight? : number\n): void "
			},
			"preLoad": {
				"desc": " \r\n\t\tLoads image and sound assets from provided list of routes before application is initalised\r\n\t\tOptional drawing function allows creation of custom loading bar\r\n\t",
				"snip": "function preLoad(\n    assets            : AssetRouteList,\n    loadingDrawFunc?  : (ctx: CanvasRenderingContext2D, fractionLoaded: number)=>void\n) "
			}
		}
	},
	"Graphics": {
		"d": {
			"desc": " Provides functions and classes for rendering bitmap and vector graphics on the canvas ",
			"snip": "import { Graphics } from './Bunas';"
		},
		"t": {
			"keyframeSet": {
				"desc": " Describes how to animate the properties of a vector sprite.\r\n\t\t\tThe value associated with each property is converted to a constant value based on what the current frame of the animation loop is.\r\n\t\t\tThis constant value is then passed to the sprite's draw function to be rendered.\r\n\t\t\tThe value can be expressed as:\r\n\t\t\t\tA range of values to be reached at equal intervals\r\n\t\t\t\t\t[10, 5, 30, 5]\r\n\t\t\t\tA range of values to be reached at a specific time during the animation cycle\r\n\t\t\t\t\t[[0, 10], [0.2, 5], [0.8, 9]]\r\n\t\t\t\tA range of values to be reached with an easing function specified\r\n\t\t\t\t\t[[0, 30, 'bounceIn'], [1, 20, 'bounceOut']]\r\n\t",
				"snip": "type keyframeSet  = {\n    [property: string] :\n    number[] |\n    number[][] |\n    (number | string)[][]\n}"
			},
			"drawFunction": {
				"desc": " Function which describes how to draw the sprite.\r\n\t\t\tFrame is a keyframe set whoses values have been interpolated to constants for each property\r\n\t",
				"snip": "type drawFunction = (frame: { [property: string] : number }, ctx: CanvasRenderingContext2D)=>void;\nexport type spriteState  = {\n    duration   : number,\n    elements   : { [element: string] : keyframeSet },\n    fr?        : number,\n    iteration? : number,\n    easeIn?    : string,\n    easeOut?   : string,\n    onEnd?     : ()=>void\n}"
			},
			"Sprite": {
				"desc": " Base interface implemented by all sprites, both vector and bitmap ",
				"snip": "interface Sprite {\n    setDuration: (frames: number, perFrame?: boolean)=>void;\n    draw: (ctx: CanvasRenderingContext2D, x: number, y: number, ang?: number)=>void;\n    toggle: (play: boolean, setFrame: number)=>void;\n    reverse: ()=>void;\n    onEnd: ()=>void;\n}"
			}
		},
		"f": {
			"setImageSmoothing": {
				"desc": "\t\tTurn on/off image smoothing (anti-aliasing)\r\n\t\tThis is turned off by default\r\n\t",
				"snip": "function setImageSmoothing(on: boolean) "
			},
			"setDuration": {
				"desc": " Sets number of game frames to display sprite animation for ",
				"snip": "//     public setDuration(frames: number) "
			}
		},
		"c": {
			"TileSet": {
				"d": {
					"desc": " Class for a bitmap tileset, a single image containing several individual static tiles ",
					"snip": "import { TileSet } from './Bunas';"
				},
				"m": {
					"Class Constructor": {
						"desc": "\t\t\tTileset can be provided as an Image element or the name of a preloaded asset.\r\n\t\t\tIf no tile height is given, it is assumed the tileset is one tile high\r\n\t\t",
						"snip": "constructor(\n    tileImage: string | HTMLImageElement,\n    tileWidth: number,\n    tileHeight?: number\n) "
					},
					"draw": {
						"desc": " Draw the tile to the canvas at the point { canX, canY }. ",
						"snip": "public draw(\n    ctx: CanvasRenderingContext2D,\n    canX: number,\n    canY: number,\n    tileNum: number\n): void "
					}
				},
				"v": {
					"width": {
						"desc": " Width of a single Tile ",
						"snip": "public width: number"
					},
					"height": {
						"desc": " Height of a single Tile ",
						"snip": "public height: number"
					}
				}
			},
			"SpriteSheet": {
				"d": {
					"desc": " Class for a bitmap sprite ",
					"snip": "import { SpriteSheet } from './Bunas';"
				},
				"m": {
					"Class Constructor": {
						"desc": "\t\t\t\t\tSprite can be provided as an Image element or the name of a preloaded asset.\r\n\t\t\t\t\tAnimated sprites must take the form of an unpadded horizontal sprite sheet.\r\n\t\t\t\t\tfrTotal is the number of frames in the sprite sheet.\r\n\t\t\t\t\tduration is the number of game frame animation will last; may be a fraction.\r\n\t\t\t",
						"snip": "constructor(\n    sprite  : string | HTMLImageElement,\n    private frTotal: number = 1,\n    duration: number = 0\n) "
					},
					"draw": {
						"desc": "\t\t\t\tDraw the sprite to the canvas at the point { canX, canY }.\r\n\t\t\t\tang may be provided to rotate the sprite by the given angle.\r\n\t\t\t\tscale can be a single number to scale x and y equally, or an array of [xScale, yScale];\r\n\t\t\t",
						"snip": "public draw(\n    ctx: CanvasRenderingContext2D,\n    canX: number,\n    canY: number,\n    ang: number = 0,\n    scale: number | number[] = [1, 1]\n): void "
					},
					"setDuration": {
						"desc": " Sets number of game frames animation will last for\r\n\t\t\t\t\tIf perFrame, sets number of game frames a single frame of sprite sheet will last for\r\n\t\t\t",
						"snip": "public setDuration(frames: number, perFrame: boolean = false) "
					},
					"toggle": {
						"desc": " Play/pause animation.\r\n\t\t\t\t\tWill toggle to opposite of current state if play is not provided.\r\n\t\t\t",
						"snip": "public toggle(play?: boolean) "
					},
					"reverse": {
						"desc": " Reverse direction of animation.\r\n\t\t\t\t\tWill toggle to opposite of current direction if runBackwards is not provided.\r\n\t\t\t",
						"snip": "public reverse(runBackwards?:boolean) "
					}
				},
				"v": {
					"width": {
						"desc": " ",
						"snip": "public width      : number"
					},
					"height": {
						"desc": " ",
						"snip": "public height     : number"
					},
					"onEnd": {
						"desc": " Animation lifecycle hook to run after animation completes a loop ",
						"snip": "public onEnd      : ()=>void = ()=>{}"
					}
				}
			},
			"VectorSprite": {
				"d": {
					"desc": " Class for vector graphic sprites ",
					"snip": "import { VectorSprite } from './Bunas';"
				},
				"m": {
					"Class Constructor": {
						"desc": " Sprite is provided as a draw function with a series of canvas draw commands\r\n\t\t\t\t\tkeyFrameSet contains a list of keyframes whose variables will be interpolated based on the current frame before being provided to the draw function\r\n\t\t\t\t\tduration is the number of game frame animation will last; may be a fraction.\r\n\t\t\t",
						"snip": "constructor(\n    public drawFunction: drawFunction,\n    public keyframeSet: keyframeSet = null,\n    public duration: number = 30\n) "
					},
					"draw": {
						"desc": " Draw the sprite to the canvas at the point { canX, canY }.\r\n\t\t\t\t\tAng may be provided to rotate the sprite by the given angle.\r\n\t\t\t",
						"snip": "public draw(ctx: CanvasRenderingContext2D, x: number, y: number, ang: number = 0) "
					},
					"setDuration": {
						"desc": " Sets number of game frames to display animation for ",
						"snip": "public setDuration(frames: number) "
					},
					"toggle": {
						"desc": " Play/pause animation.\r\n\t\t\t\t\tWill toggle to opposite of current state if play is not provided.\r\n\t\t\t",
						"snip": "public toggle(play?: boolean ) "
					},
					"reverse": {
						"desc": " Reverse direction of animation.\r\n\t\t\t\t\tWill toggle to opposite of current direction if runBackwards is not provided.\r\n\t\t\t",
						"snip": "public reverse(runBackwards?:boolean) "
					}
				},
				"v": {
					"onEnd": {
						"desc": " Animation lifecycle hook to run after animation completes a loop ",
						"snip": "public onEnd     : () => void = () => {}"
					},
					"drawFunction": {
						"desc": "",
						"snip": "public drawFunction: drawFunction"
					},
					"keyframeSet": {
						"desc": "",
						"snip": "public keyframeSet: keyframeSet = null"
					},
					"duration": {
						"desc": "",
						"snip": "public duration: number = 30"
					}
				}
			},
			"Emitter": {
				"d": {
					"desc": " Class to create a particle emitter ",
					"snip": "import { Emitter } from './Bunas';"
				},
				"m": {
					"Class Constructor": {
						"desc": " Angle, Power and Rate can be given as a constant or as a range [lowest, highest] to randomly choose from ",
						"snip": "constructor(\n    public x: number,\n    public y: number,\n    z: number,\n    ang?   : number | number[],\n    power? : number | number[],\n    rate?  : number | number[],\n) "
					}
				},
				"v": {
					"set": {
						"desc": "\t\t * Time between particle emissions, set to -1 to stop emissions\r\n\t\t ",
						"snip": "let set rate(a: number | number[]) {\n    this._rate = this.configRange(a);\n}"
					},
					"x": {
						"desc": "",
						"snip": "public x: number"
					},
					"y": {
						"desc": "",
						"snip": "public y: number"
					}
				}
			}
		}
	},
	"Input": {
		"d": {
			"desc": " This module provides an interface for user inputs ",
			"snip": "import { Input } from './Bunas';"
		},
		"t": {
			"KeyBoard": {
				"desc": " Private: Describes state of keyboard input ",
				"snip": "interface KeyBoard {\n    down    : string;\n    up      : string;\n    pressed : string[];\n}"
			},
			"MouseButton": {
				"desc": " Private: Describes single mouse button state ",
				"snip": "interface MouseButton {\n    down       : boolean;\n    up         : boolean;\n    doubleDown : boolean;\n    pressed    : boolean;\n    drag       : boolean;\n    startDrag  : boolean;\n    endDrag    : boolean;\n    dragging   : boolean;\n    dragPts    : {x: number, y: number}[];\n}"
			},
			"Mouse": {
				"desc": " Describes current state of mouse input ",
				"snip": "interface Mouse {\n    x: number,\n    y: number,\n    left  : MouseButton;\n    right : MouseButton;\n}"
			}
		},
		"v": {
			"mouse": {
				"desc": " Current state of mouse input ",
				"snip": "let mouse: Mouse = {\n    x:    0,\n    y:    0,\n    left: {\n        down       : false,\n        up         : false,\n        doubleDown : false,\n        pressed    : false,\n        drag       : false,\n        startDrag  : false,\n        endDrag    : false,\n        dragging   : false,\n        dragPts    : []\n    },\n    right: {\n        down       : false,\n        up         : false,\n        doubleDown : false,\n        pressed    : false,\n        drag       : false,\n        startDrag  : false,\n        endDrag    : false,\n        dragging   : false,\n        dragPts    : []\n    }\n}"
			},
			"key": {
				"desc": "\t\t\tCurrent state of keyboard input\r\n\t\t\tkey.pressed stores name of all keys currently pressed\r\n\t\t",
				"snip": "let key: KeyBoard = {\n    up      : null,\n    down    : null,\n    pressed : []\n}"
			}
		},
		"f": {
			"setDragTolerance": {
				"desc": " Sets number of pixels cursor must move while pressed before drag event is triggered ",
				"snip": "function setDragTolerance(tolerance: number): void "
			},
			"setDoubleClickTiming": {
				"desc": " Sets maximum milliseconds between clicks in a double click in order for event to be trigged ",
				"snip": "function setDoubleClickTiming(wait: number): void "
			},
			"allowContextMenu": {
				"desc": "\t\tEnable/Disable browser context menu on right click\r\n\t\tDisabled by default\r\n\t ",
				"snip": "function allowContextMenu(show: boolean = true): void "
			},
			"isPressed": {
				"desc": " Returns true is any of the key names provided are currently pressed  ",
				"snip": "function isPressed(...keys: string[]): boolean | object "
			},
			"mouseInArea": {
				"desc": " Gets position of mouse within the current view of an area ",
				"snip": "function mouseInArea(a?: World.Area): "
			},
			"setCursor": {
				"desc": "\t\tSets cursor type if CSS cursor name is provided\r\n\t\tSets a custom cursor to be rendered if draw function, or image is provided is provided\r\n\t",
				"snip": "function setCursor(cursor: string | HTMLImageElement | ((ctx: CanvasRenderingContext2D, dT: number)=>void)): void "
			},
			"setMouseListener": {
				"desc": "\t\tRegisters game object with relative hit box in which to listener for mouseover events\r\n\t\tIf circular, hit box will be a circle\r\n\t\tIf centered, box will be centered on object.x, object.y; otherwise, will be aligned with top left\r\n\t",
				"snip": "function setMouseListener(\n    g: GameObject,\n    width: number,\n    height: number,\n    circular: boolean = false,\n    centered: boolean = false\n): void "
			}
		}
	},
	"Light": {
		"d": {
			"desc": " This module creates lighting effects including shadow casting, background lighting and coloured lighting ",
			"snip": "import { Light } from './Bunas';"
		},
		"c": {
			"LightArea": {
				"d": {
					"desc": " Light settings for an Area ",
					"snip": "import { LightArea } from './Bunas';"
				},
				"m": {
					"addSource": {
						"desc": " ",
						"snip": "public addSource(source: Source | Source[]) "
					},
					"addBlock": {
						"desc": " ",
						"snip": "public addBlock(block: Block | Block[]) "
					},
					"Class Constructor": {
						"desc": "",
						"snip": "constructor(\r\n\t\t\tpublic area: World.Area,\r\n\t\t\tbgLight: string | CanvasGradient = '#000'\r\n\t\t) {"
					}
				},
				"v": {
					"area": {
						"desc": "",
						"snip": "public area: World.Area"
					}
				}
			},
			"Source": {
				"d": {
					"desc": " Light emitting object ",
					"snip": "import { Source } from './Bunas';"
				},
				"m": {
					"Class Constructor": {
						"desc": "\t\t  rad is the radius of the light circle cast.\r\n\t\t\tcolor is a hex value, defaults set to #fff (white)\r\n\t\t\tIf castShadows is false, light will not be affected by blockers\r\n\t\t\tarc is the angle in radians of the light circle cast. Default is 2PI, a full circle.\r\n\t\t\tIf arc is not a full circle, edgeBlue defines the blur of the arc edges.\r\n\t\t ",
						"snip": "constructor(\n    public x: number,\n    public y: number, \n    rad: number,\n    color: string = '#fff',\n    public castShadows: boolean = true,\n    arc: number = 6.2832,\n    edgeBlur: number = 0\n) "
					},
					"delete": {
						"desc": " ",
						"snip": "public delete() "
					}
				},
				"v": {
					"ang": {
						"desc": " Direction light is pointing; only matters if light arc is set ",
						"snip": "public ang: number = 0"
					},
					"x": {
						"desc": "",
						"snip": "public x: number"
					},
					"y": {
						"desc": "",
						"snip": "public y: number, "
					},
					"castShadows": {
						"desc": "",
						"snip": "public castShadows: boolean = true"
					}
				}
			},
			"Block": {
				"d": {
					"desc": " Light blocking / shadow casting object ",
					"snip": "import { Block } from './Bunas';"
				},
				"m": {
					"Class Constructor": {
						"desc": "\t\t \tMask is the polygon which blocks light\r\n\t\t\t  - If mask is a polygon, it is given as an array of points which define the shape\r\n\t\t\t  - If mask is a rectangle, it can be given as an object of {width, height}\r\n\t\t\t  - If mask is a circle, it is given as a number of the circle's radius length\r\n\t\t\tspriteMask is an optional sprite shape which will be removed from the shadow in addition to the mask\r\n\t\t\t  - spriteMask allows a block to be made for a complex spirte shape but using a simple underlying polygon mask to improve render time\r\n\t\t\tblockLightInside, if true, blocks all light from a light source if it is within the bounds of the block\r\n\t\t\ttranslucent color is the colour light passing through the blocker will turn if it is not fully opaque\r\n\t\t",
						"snip": "constructor(\n    public x: number,\n    public y: number,\n    mask: {x: number, y: number}[] | {width: number, height: number} | number,\n    spriteMask?: (ctx: CanvasRenderingContext2D)=>void,\n    public blockLightInside: boolean = false,\n    translucentColor = '#000'\n) "
					},
					"delete": {
						"desc": " ",
						"snip": "public delete() "
					}
				},
				"v": {
					"x": {
						"desc": "",
						"snip": "public x: number"
					},
					"y": {
						"desc": "",
						"snip": "public y: number"
					},
					"blockLightInside": {
						"desc": "",
						"snip": "public blockLightInside: boolean = false"
					}
				}
			}
		}
	},
	"World": {
		"d": {
			"desc": "\tContains classes which allow\r\n\t\t- Creation of seperate game areas\r\n\t\t- Area level design\r\n\t\t- Viewport control\r\n",
			"snip": "import { World } from './Bunas';"
		},
		"c": {
			"Area": {
				"d": {
					"desc": " Class for creating a game area ",
					"snip": "import { Area } from './Bunas';"
				},
				"m": {
					"Class Constructor": {
						"desc": "\t\t\t\tIf persist is true, objects in area will persists after close(), until open() is called again.\r\n\t\t\t\tIf persist is false, all object will be deleted on close, and recreated again on open()\r\n\t\t\t\tzIndex sets the order in which this Area is drawn if multiple areas are open at once\r\n\t\t\t\tonInit, onOpen, onClose are custom functions to call \r\n\t\t\t\tonInit is called when a persistent Area is opened for the first time\r\n\t\t\t",
						"snip": "constructor(\n    public name\t\t\t\t: string,\n    private persist   : boolean = false,\n    zIndex\t\t\t\t\t\t:\tnumber = 0,\n    public onInit     : ()=>void = ()=>{},\n    public onOpen     : ()=>void = ()=>{},\n    public onClose    : ()=>void = ()=>{},\n) "
					},
					"addBackground": {
						"desc": "\t\t\t\tSets the background of area\r\n\t\t\t\tAsset can be the name of background asset, or the string value of a color\r\n\t\t\t",
						"snip": "public addBackground(\n    asset: string,\n    isForeGround: boolean = false,\n    zIndex: number = 0,\n    parralax: number | {x: number, y: number} = 1,\n    offset: number | {x: number, y: number} = 0,\n    repeat: boolean | {x: boolean, y: boolean} = true,\n    customName?: string\n): background "
					},
					"open": {
						"desc": " ",
						"snip": "public open(): void "
					},
					"close": {
						"desc": " ",
						"snip": "public close() "
					},
					"delete": {
						"desc": " ",
						"snip": "public delete(): void "
					},
					"remove": {
						"desc": " Remove an object from the Area ",
						"snip": "public remove(o: GameObject): void "
					},
					"togglePersistance": {
						"desc": " If persist is not provided, value is set to oppsite of its current value ",
						"snip": "public togglePersistance(persist?: boolean) "
					},
					"toggleLight": {
						"desc": " Use Light engine in this Area ",
						"snip": "public toggleLight(on?: boolean): void "
					}
				},
				"v": {
					"view": {
						"desc": " View assigned to this Area ",
						"snip": "public view: View"
					},
					"light": {
						"desc": " Light.LightArea assigned to this area if using lighting ",
						"snip": "public light: Light.LightArea"
					},
					"name": {
						"desc": "",
						"snip": "public name\t\t\t\t: string"
					},
					"onInit": {
						"desc": "",
						"snip": "public onInit     : ()=>void = ()=>{}"
					},
					"onOpen": {
						"desc": "",
						"snip": "public onOpen     : ()=>void = ()=>{}"
					},
					"onClose": {
						"desc": "",
						"snip": "public onClose    : ()=>void = ()=>{}"
					}
				}
			}
		},
		"f": {
			"track": {
				"desc": "\t\t\tSet the view to keep an Game Object in frame\r\n\t\t\tpadding is the distance the object must be from the edge of the view before the view is moved\r\n\t\t\tIf padding is a number it is applied equally for all edges, if an array it is applied as [top, left, bottom, right]\r\n\t\t\ttrackSpeed is how quickly the view catchs up with the object\r\n\t\t",
				"snip": "public track(\n    object\t\t\t: GameObject,\n    padding\t\t\t: number | number[] = 0,\n    trackSpeed\t: number = 0,\n    bound?\t\t\t: number[]\n) "
			},
			"toggleTracking": {
				"desc": "\t\t\tTemporarily turn object tracking on or off\r\n\t\t\tIf turnOn is not provided, value is set to oppsite of its current value\r\n\t\t",
				"snip": "public toggleTracking(turnOn?: boolean) "
			}
		}
	}
}